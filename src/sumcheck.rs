#![allow(dead_code)]
use prover::{ProverMsg, ProverState};
use thiserror::Error;

use self::verifier::SubClaim;
use crate::{
    field::RandomField,
    field_config::FieldConfig,
    poly::{mle::DenseMultilinearExtension, polynomials::ArithErrors},
    transcript::KeccakTranscript as Transcript,
};

pub mod prover;
pub mod utils;
pub mod verifier;

/// Interactive Proof for Multilinear Sumcheck
pub struct IPForMLSumcheck<const N: usize>;
#[derive(Error, Debug)]
pub enum SumCheckError<const N: usize> {
    #[error("univariate polynomial evaluation error")]
    EvaluationError(ArithErrors),
    #[error("incorrect sumcheck sum. Expected `{0}`. Received `{1}`")]
    SumCheckFailed(RandomField<N>, RandomField<N>),
    #[error("max degree exceeded")]
    MaxDegreeExceeded,
}

impl<const N: usize> From<ArithErrors> for SumCheckError<N> {
    fn from(arith_error: ArithErrors) -> Self {
        Self::EvaluationError(arith_error)
    }
}

/// Sumcheck for products of multilinear polynomial
pub struct MLSumcheck<const N: usize>(#[doc(hidden)] (RandomField<N>, Transcript));

/// proof generated by prover
#[derive(Clone, Debug, PartialEq)]
pub struct Proof<const N: usize>(Vec<ProverMsg<N>>);

impl<const N: usize> MLSumcheck<N> {
    /// extract sum from the proof
    pub fn extract_sum(proof: &Proof<N>) -> RandomField<N> {
        proof.0[0].evaluations[0] + proof.0[0].evaluations[1]
    }

    /// This function does the same thing as `prove`, but it uses cryptographic sponge as the transcript/to generate the
    /// verifier challenges. Additionally, it returns the prover's state in addition to the proof.
    /// Both of these allow this sumcheck to be better used as a part of a larger protocol.
    pub fn prove_as_subprotocol(
        transcript: &mut Transcript,
        mles: Vec<DenseMultilinearExtension<N>>,
        nvars: usize,
        degree: usize,
        comb_fn: impl Fn(&[RandomField<N>]) -> RandomField<N>,
        config: FieldConfig<N>,
    ) -> (Proof<N>, ProverState<N>) {
        transcript.absorb_random_field::<N>(&RandomField::from(nvars as u128));
        transcript.absorb_random_field::<N>(&RandomField::from(degree as u128));
        let mut prover_state = IPForMLSumcheck::prover_init(mles, nvars, degree);
        let mut verifier_msg = None;
        let mut prover_msgs = Vec::with_capacity(nvars);
        for _ in 0..nvars {
            let prover_msg =
                IPForMLSumcheck::prove_round(&mut prover_state, &verifier_msg, &comb_fn);
            transcript.absorb_slice(&prover_msg.evaluations);
            prover_msgs.push(prover_msg);
            let next_verifier_msg = IPForMLSumcheck::sample_round(transcript, &config);
            transcript.absorb_random_field(&next_verifier_msg.randomness);

            verifier_msg = Some(next_verifier_msg);
        }
        prover_state
            .randomness
            .push(verifier_msg.unwrap().randomness);

        (Proof(prover_msgs), prover_state)
    }

    /// This function does the same thing as `prove`, but it uses a cryptographic sponge as the transcript/to generate the
    /// verifier challenges. This allows this sumcheck to be used as a part of a larger protocol.
    pub fn verify_as_subprotocol(
        transcript: &mut Transcript,
        nvars: usize,
        degree: usize,
        claimed_sum: RandomField<N>,
        proof: &Proof<N>,
        config: FieldConfig<N>,
    ) -> Result<SubClaim<N>, SumCheckError<N>> {
        transcript.absorb_random_field(&RandomField::<N>::from(nvars as u128));
        transcript.absorb_random_field(&RandomField::<N>::from(degree as u128));

        let mut verifier_state = IPForMLSumcheck::verifier_init(nvars, degree, config);
        for i in 0..nvars {
            let prover_msg = proof.0.get(i).expect("proof is incomplete");
            transcript.absorb_slice(&prover_msg.evaluations);
            let verifier_msg =
                IPForMLSumcheck::verify_round(prover_msg.clone(), &mut verifier_state, transcript);
            transcript.absorb_random_field(&verifier_msg.randomness);
        }

        IPForMLSumcheck::check_and_generate_subclaim(verifier_state, claimed_sum)
    }
}
