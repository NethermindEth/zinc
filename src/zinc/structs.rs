use ark_std::{marker::PhantomData, vec::Vec};

use crate::{
    field::RandomField,
    sumcheck,
    traits::{ConfigReference, ZipTypes},
    zip::{code::LinearCodeSpec, pcs::structs::MultilinearZipCommitment},
};

/// Non-interactive proof generated by the linearization prover
///
/// # Members
///
/// * `linearization_sumcheck` - A list of non-interactive sumcheck prover messages.
/// * `v` - The MLE of `wit.f_hat` evaluated at the sumcheck challenge point.
/// * `u` - The MLEs of $\\{ M_j \mathbf{z} \mid j = 1, 2, \dots, t \\}$ evaluated at sumcheck challenge point.
#[derive(Debug, Clone)]
pub struct SpartanProof<C: ConfigReference> {
    /// A list of non-interactive sumcheck prover messages.
    ///
    /// Sent in step 2 of linearization subprotocol.
    pub linearization_sumcheck: sumcheck::SumcheckProof<C>,
    pub second_sumcheck: sumcheck::SumcheckProof<C>,
    pub V_s: Vec<RandomField<C>>,
}

pub struct ZipProof<C: ConfigReference> {
    pub z_comm: MultilinearZipCommitment,
    pub v: RandomField<C>,
    pub pcs_proof: Vec<u8>,
}

pub struct ZincProof<C: ConfigReference> {
    pub spartan_proof: SpartanProof<C>,
    pub zip_proof: ZipProof<C>,
}

/// The implementation of the `LinearizationProver` trait is defined in the main linearization file.
pub struct ZincProver<ZT: ZipTypes, C: ConfigReference, S: LinearCodeSpec> {
    pub lc_spec: S,
    phantom_data: PhantomData<(ZT, C)>,
}

impl<ZT: ZipTypes, C: ConfigReference, S: LinearCodeSpec> ZincProver<ZT, C, S> {
    pub fn new(lc_spec: S) -> Self {
        ZincProver {
            lc_spec,
            phantom_data: PhantomData,
        }
    }
}

/// The implementation of the `LinearizationVerifier` trait is defined in the main linearization file.
pub struct ZincVerifier<ZT: ZipTypes, C: ConfigReference, S: LinearCodeSpec> {
    pub lc_spec: S,
    phantom_data: PhantomData<(ZT, C, S)>,
}

impl<ZT: ZipTypes, C: ConfigReference, S: LinearCodeSpec> ZincVerifier<ZT, C, S> {
    pub fn new(lc_spec: S) -> Self {
        ZincVerifier {
            lc_spec,
            phantom_data: PhantomData,
        }
    }
}
