use ark_std::{boxed::Box, marker::PhantomData, vec::Vec};
use prover::{ProverMsg, ProverState};
use thiserror::Error;

use self::verifier::SubClaim;
use crate::{
    poly::ArithErrors,
    poly_f::mle::DenseMultilinearExtension,
    traits::{Field, FieldMap, Words},
    transcript::KeccakTranscript as Transcript,
};

pub mod prover;
pub mod utils;
pub mod verifier;

#[cfg(test)]
mod tests;

/// Interactive Proof for Multilinear Sumcheck
pub struct IPForMLSumcheck<F>(PhantomData<F>);
#[derive(Error, Debug)]
pub enum SumCheckError<F: Field> {
    #[error("univariate polynomial evaluation error")]
    EvaluationError(ArithErrors),
    #[error("incorrect sumcheck sum. Expected `{0}`. Received `{1}`")]
    SumCheckFailed(Box<F::DebugField>, Box<F::DebugField>),
    #[error("max degree exceeded")]
    MaxDegreeExceeded,
}

impl<F: Field> From<ArithErrors> for SumCheckError<F> {
    fn from(arith_error: ArithErrors) -> Self {
        Self::EvaluationError(arith_error)
    }
}

/// Sumcheck for products of multilinear polynomial
pub struct MLSumcheck<F: Field>(#[doc(hidden)] (F, Transcript));

/// proof generated by prover
#[derive(Clone, Debug, PartialEq)]
pub struct SumcheckProof<F>(pub Vec<ProverMsg<F>>);

impl<F: Field> MLSumcheck<F> {
    /// extract sum from the proof
    pub fn extract_sum(proof: &SumcheckProof<F>) -> F {
        proof.0[0].evaluations[0].clone() + proof.0[0].evaluations[1].clone()
    }

    /// This function does the same thing as `prove`, but it uses cryptographic sponge as the transcript/to generate the
    /// verifier challenges. Additionally, it returns the prover's state in addition to the proof.
    /// Both of these allow this sumcheck to be better used as a part of a larger protocol.
    pub fn prove_as_subprotocol(
        transcript: &mut Transcript,
        mles: Vec<DenseMultilinearExtension<F>>,
        nvars: usize,
        degree: usize,
        comb_fn: impl Fn(&[F]) -> F + Send + Sync,
        config: F::R,
    ) -> (SumcheckProof<F>, ProverState<F>) {
        let (nvars_field, degree_field): (F, F) = if F::W::num_words() == 1 {
            (
                (nvars as u64).map_to_field(config),
                (degree as u64).map_to_field(config),
            )
        } else {
            (
                (nvars as u128).map_to_field(config),
                (degree as u128).map_to_field(config),
            )
        };
        transcript.absorb_random_field(&nvars_field);
        transcript.absorb_random_field(&degree_field);
        let mut prover_state = IPForMLSumcheck::prover_init(mles, nvars, degree);
        let mut verifier_msg = None;
        let mut prover_msgs = Vec::with_capacity(nvars);

        for _ in 0..nvars {
            let prover_msg =
                IPForMLSumcheck::prove_round(&mut prover_state, &verifier_msg, &comb_fn, config);
            transcript.absorb_slice(&prover_msg.evaluations);
            prover_msgs.push(prover_msg);
            let next_verifier_msg = IPForMLSumcheck::sample_round(transcript, config);
            transcript.absorb_random_field(&next_verifier_msg.randomness);

            verifier_msg = Some(next_verifier_msg);
        }
        prover_state
            .randomness
            .push(verifier_msg.unwrap().randomness);

        (SumcheckProof(prover_msgs), prover_state)
    }

    /// This function does the same thing as `prove`, but it uses a cryptographic sponge as the transcript/to generate the
    /// verifier challenges. This allows this sumcheck to be used as a part of a larger protocol.
    pub fn verify_as_subprotocol(
        transcript: &mut Transcript,
        num_vars: usize,
        degree: usize,
        claimed_sum: F,
        proof: &SumcheckProof<F>,
        config: F::R,
    ) -> Result<SubClaim<F>, SumCheckError<F>> {
        let (nvars_field, degree_field): (F, F) = if F::W::num_words() == 1 {
            (
                (num_vars as u64).map_to_field(config),
                (degree as u64).map_to_field(config),
            )
        } else {
            (
                (num_vars as u128).map_to_field(config),
                (degree as u128).map_to_field(config),
            )
        };
        transcript.absorb_random_field(&nvars_field);
        transcript.absorb_random_field(&degree_field);

        if proof.0.len() != num_vars {
            panic!("insufficient rounds");
        }

        let mut verifier_state = IPForMLSumcheck::verifier_init(num_vars, degree, config);
        for i in 0..num_vars {
            let prover_msg = proof.0.get(i).expect("proof is incomplete");
            transcript.absorb_slice(&prover_msg.evaluations);
            let verifier_msg =
                IPForMLSumcheck::verify_round(prover_msg.clone(), &mut verifier_state, transcript);
            transcript.absorb_random_field(&verifier_msg.randomness);
        }

        IPForMLSumcheck::check_and_generate_subclaim(verifier_state, claimed_sum, config)
    }
}
